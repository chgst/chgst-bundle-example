{% extends '::base.html.twig' %}

{% block body %}

    <div class="row">
        <div class="col">
            <h3>Buildings</h3>

            <table class="table table-striped mt-5">
                <tr>
                    <th>Id</th>
                    <th>Number of People</th>
                    <th>Names</th>
                </tr>

                {% for building in buildings %}
                    <tr>
                        <td>{{ building.id }}</td>
                        <td>{{ building.persons|length }}</td>
                        <td>{{ building.persons|json_encode }}</td>
                    </tr>
                {% endfor %}
            </table>

            <ul>
                <li><a href="{{ path('enter') }}">New Entry</a></li>
                <li><a href="{{ path('exit') }}">New Exit</a></li>
            </ul>
        </div>
    </div>


    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <canvas id="chLine" height="100px"></canvas>
                </div>
            </div>
        </div>
    </div>



{% endblock %}

{% block javascripts %}

    {{ parent() }}

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>

    <script>

        /**
         * this code is far from being perfect, but it illustrates how can you visualise
         * data stored in event stream.
         */

        $(function() {

            String.prototype.toHex = function() {
                var hash = 0;
                if (this.length === 0) return hash;
                for (var i = 0; i < this.length; i++) {
                    hash = this.charCodeAt(i) + ((hash << 5) - hash);
                    hash = hash & hash;
                }
                var color = '#';
                for (var i = 0; i < 3; i++) {
                    var value = (hash >> (i * 8)) & 255;
                    color += ('00' + value.toString(16)).substr(-2);
                }
                return color;
            };

            var temp = {};
            var labels = [];

            var chartData = {
                datasets: []
            };

            $.ajax({
                url: '/history',
                success: function (result) {
                    console.log(result);
                    $.each(result, function (index, item) {

                        console.log(item);
                        var time = (new Date(item['date'])).getTime();

                        if(labels.indexOf(time) === -1)
                        {
                            labels.push(time);
                        }

                        var t = {x: time, y: item['numberOfPeople']};

                        if(temp[item['building']] === undefined) {
                            temp[item['building']] = [];
                        }

                        temp[item['building']].push(t);

                    });

                    $.each(temp, function (index, value) {
                        chartData.datasets.push({
                            label: index,
                            data: value,
                            backgroundColor: 'transparent',
                            borderColor: index.toHex()
                        });
                    });

                    chartData['labels'] = labels;

                    console.log(temp);

                    console.log(chartData);

                    var ctx = $("#chLine");

                    new Chart(ctx, {
                        type: 'line',
                        data: chartData,
                        options: {
                            elements: {
                                line: {
                                    tension: 0.3
                                }
                            },
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: false,
                                        autoSkip: false
                                    }
                                }],
                                xAxes: [{
                                    ticks: {
                                        callback: function(label) { return moment(label).format('lll') }
                                    }
                                }]
                            },
                            legend: {
                                display: true
                            }
                        }
                    });
                }
            });
        });



    </script>

{% endblock %}